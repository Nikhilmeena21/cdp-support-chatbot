{
  "url": "https://docs.lytics.com/docs/guide-content-recommendations",
  "title": "Content Recommendations",
  "content": "Content Recommendations\nSuggest Edits\nTL;DR\nThis document details the process of utilizing Lytics' real-time personalization engine to showcase content that resonates with a visitor's interests. This can be implemented directly inline or through a pop-up modal on your website to boost engagement.\nBackground\nHow does Lytics make content recommendations?\nLytics Interest Engines provides a sophisticated approach for businesses to gain and leverage insights into which content is most likely to resonate based on behavioral patterns. This is achieved through a detailed enrichment and affinity generation process in real-time. While full details are available in Lytics' comprehensive documentation, the core process can be distilled into four key steps:\nTracking Interactions\n: Monitoring visitor behavior in real-time to understand their engagement with the site.\nContent Analysis & Topic Extraction\n: Using Google NLP and proprietary algorithms, Lytics automatically analyzes all the content on your website, translating it into a detailed topic graph.\nInterest Scoring\n: Assigning scores to reflect a visitor's level of interest in different topics, updated dynamically as new interactions occur.\nContent Recommendation\n: Suggesting content that aligns with the visitor's demonstrated interests, leveraging real-time insights for timely and relevant engagement.\nThis streamlined framework enables real-time personalization, enhancing user experience by continuously adapting to evolving visitor interests.\nWhy is it important?\nRelevant content for individual users boosts marketing effectiveness and ROI by increasing engagement and conversion rates. Personalized content meets users' interests, leading to better resource utilization and higher customer retention. This targeted strategy enhances sales opportunities and brand perception, directly improving return on investment.\nSee it in action.\nLytics' real-time personalization engine lets you first identify the current web visitor, programmatically review their profile, and deliver one or more pieces of content based on their unique interests to maximize engagement.\nInstructions\nBelow, you'll find a detailed guide on how to execute this use case. At the end, you'll find additional reading, which will help you learn how to extend and customize this use case further.\nRequirements\nHave access to an active Lytics account.\nLytics account must have had enough time to build the topic graph. Typically, 24 to 48 hours.\nAbility to add JavaScript to your website via tag manager or CMS.\nEntry-level knowledge of JavaScript. (Don't worry; it is mostly \"copy and paste\" here.)\nInstall Lytics Core SDK\nBefore executing this use case, your website must be properly configured with the core Lytics SDK (JavaScript tag). Please refer to our\ninstallation documentation\nto confirm the tag is present before continuing.\nInterest Scores & Content Collections\nYour content must be classified before Lytics can offer content recommendations or insights. Typically, this classification process takes 24 to 48 hours, though it may extend if your catalog is particularly large. To ensure the health of your content graph and interest engines, there are a few key areas to focus on:\nVerify Interest Scores on Profile\nEnsure the Lytics Developer Tools Chrome extension is installed and Enabled.\nVisit the domain(s) that have the Lytics JavaScript SDK installed.\nOpen the Chrome extension and navigate to the\nProfile\nsection at the bottom.\nFrom the\nSummary\ntab, you will see a section labeled\nInterests\n. Here, we will list any topics and their associated level for the user. If your user gets a message \"No interests are available,\" proceed to the next step to ensure content has been classified.\nVerify Content has Been Classified\nðŸ“˜\nIf you have not already verified the quality of classification and metadata, please refer to our\nquickstart documentation\n.\nFrom the Lytics interface, navigate to\nDecision Engine\nfrom the product switcher at the top left.\nUsing the left-hand menu, navigate to\nContent\n>\nCollections\n.\nFrom the list of collections, there is likely only one; look for\nAll Content\nin the list and the rows\nSize\n. This refers to the number of documents classified; it should be greater than one and reflect your total catalog.\nFor greater detail, you can also visit\nContent\n>\nWeb Classification\n.\nAt the top of that page will be a summary dashboard of all content that has been successfully classified and cataloged. Most notably, the\nAll Documents\ncount under the\nURL Path\ncomponent.\nTroubleshooting Common Problems\nI have no\nlytics_content_enrich\nstream. (coming soon)\nMy content is not showing up at all. (coming soon)\nMy content is being classified, but none of my documents have images. (coming soon)\nSelect a content collection.\nWe will use the default collection outlined below for this exercise, but you may also create a custom collection with a subset of your content to recommend.\nCollection\nDescription\nall_content\nThis collection contains all classified documents. It comes out of the box in all Lytics accounts.\nðŸ“˜\nReady to go a step farther and build a custom collection of your content to ensure recommendations are selected from a more currated set of documents? Check out our full\ndocumentation\n.\nActivate Required Attributes & Segments\nAs an admin user of Lytics, you can\nenable or disable any attributes\nfrom being surfaced to the web via our JavaScript SDK. Depending on how your account has been configured, you may need to allow some of the required attributes for this particular use case.\nRequired Attributes:\nSegment\nDescription\nall\nWe will use the out-of-the-box segment containing all your site's users for demonstration. We recommend using something more refined in production, such as new or high-value visitors.\nConfigure Web Experience\nTo execute this use case, we will demonstrate two examples. The first will be a single content recommendation in a popup style modal, while the second will leverage Pathfora to add a set of recommendations inline to your website.\nExample 1: Content Recommendation Modal\nJavaScript\nHTML\njstag.on('pathfora.publish.done', function(topic, event){\n  var module = new pathfora.Message({\n    id: 'content-rec-sample',\n    layout: 'slideout',\n    theme: 'dark',\n    headline: 'Yummy content!',\n    msg: 'We suspect you are going to want to check this out.',\n    recommend: {\n      collection: 'all_content'\n    },\n    cancelShow: false,\n    okShow: false,\n    variant: 3\n  });\n\n  var modules = {\n    target: [{\n      segment: \"all\",\n      widgets: [module]\n    }]\n  };\n\n  pathfora.initializeWidgets(modules);\n});\n<script type=\"text/javascript\">\n  jstag.on('pathfora.publish.done', function(topic, event){\n    var module = new pathfora.Message({\n      id: 'content-rec-sample',\n      layout: 'slideout',\n      theme: 'dark',\n      headline: 'Yummy content!',\n      msg: 'We suspect you are going to want to check this out.',\n      recommend: {\n        collection: 'all_content'\n      },\n      cancelShow: false,\n      okShow: false,\n      variant: 3 // this variant shows the title and image for the recommendations\n    });\n\n    var modules = {\n      target: [{\n        segment: \"all\",\n        widgets: [module]\n      }]\n    };\n\n    pathfora.initializeWidgets(modules);\n  });\n</script>\nExample 2: Inline Content Recommendation\nIn this example, we'll use a generic Drupal Block with pure HTML and CSS, but the same approach can be taken using WordPress or a third-party tag manager such as Google Tag Manager.\nHTML\n<style>\n    .rec-container {\n        display: flex;\n        justify-content: space-between;\n        width: 100%;\n    }\n\n    .rec-item {\n        box-sizing: border-box;\n        flex: 1;\n        padding: 10px;\n    }\n\n    .rec-title,\n    .rec-description {\n        font-size: 14px;\n        margin-bottom: 5px;\n        word-wrap: break-word;\n    }\n\n    .rec-description {\n        font-size: 12px;\n    }\n\n    .rec-img {\n        height: auto;\n        margin-bottom: 5px;\n        max-width: 100%;\n    }\n</style>\n<div class=\"rec-container\">\n    <div class=\"rec-item\" data-pfblock=\"lytics-recommend\" data-pfrecommend=\"all_content\">\n        <div class=\"rec-title\">\n            <a data-pftype=\"URL\"><strong data-pftype=\"title\">Recommendation title loading...</strong></a>\n        </div>\n        <p>\n            <img class=\"rec-img\" alt=\"Recommendation related image\">\n        </p>\n        <p class=\"rec-description\" data-pftype=\"description\">\n            The recommendation description is loading...\n        </p>\n    </div>\n    <div class=\"rec-item\" data-pfblock=\"lytics-recommend\" data-pfrecommend=\"all_content\">\n        <div class=\"rec-title\">\n            <a data-pftype=\"URL\"><strong data-pftype=\"title\">Recommendation title loading...</strong></a>\n        </div>\n        <p>\n            <img class=\"rec-img\" alt=\"Recommendation related image\">\n        </p>\n        <p class=\"rec-description\" data-pftype=\"description\">\n            The recommendation description is loading...\n        </p>\n    </div>\n    <div class=\"rec-item\" data-pfblock=\"lytics-recommend\" data-pfrecommend=\"all_content\">\n        <div class=\"rec-title\">\n            <a data-pftype=\"URL\"><strong data-pftype=\"title\">Recommendation title loading...</strong></a>\n        </div>\n        <p>\n            <img class=\"rec-img\" alt=\"Recommendation related image\">\n        </p>\n        <p class=\"rec-description\" data-pftype=\"description\">\n            The recommendation description is loading...\n        </p>\n    </div>\n</div>\nUpdated\n12 months ago",
  "source": "lytics"
}